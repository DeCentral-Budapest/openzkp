.TH ffs.h 3 2016/07/26 0.0.1 OpenZKP
.SH NAME
.ce
Feige–Fiat–Shamir identification scheme

FFS_CTX_new, FFS_Prover_new, FFS_Verifier_new, FFS_generate_secret, FFS_generate_challenge, FFS_proof_nonce, FFS_verification_nonce, FFS_Prove, FFS_Verify
.SH SYNOPSIS
#include <openzkp/ffs.h>

FFS_CTX *FFS_CTX_new(long k, BN_CTX *ctx);

FFS_Prover *FFS_Prover_new(BIGNUM **s, FFS_CTX *ctx);

FFS_Verifier *FFS_Verifier_new(BIGNUM **v, FFS_CTX *ctx);

BIGNUM **FFS_generate_secret(FFS_Prover *prover);

BIGNUM **FFS_generate_challenge(FFS_Prover *prover);

BIGNUM *FFS_proof_nonce(FFS_Prover *prover);

unsigned char *FFS_verification_nonce(FFS_Verifier *verifier);

BIGNUM *FFS_Prove(FFS_Prover *prover, unsigned char *verification_nonce);

double FFS_Verify(FFS_Verifier *verifier, BIGNUM *proof, BIGNUM *proof_nonce, unsigned char *verification_nonce);

.SH DESCRIPTION
.I FFS_CTX_new
creates a new context using
.B k
vector size of secret/verify vectors.

.I FFS_Prover_new
creates a prover entity with secret vector
.B s.
If 
.B s
is 
.B NULL
, a new vector will be created that can be accessed in
.B prover->s.

.I FFS_Verifier_new
creates a verifier entity with secret vector 
.B v.
If 
.B v
is 
.B NULL
, a new vector will be created that can be accessed in
.B prover->v.

.I FFS_generate_secret
returns a secret vector of
.B BIGNUM
generated from
.B prover's
data and context.

.I FFS_generate_challenge
returns a challange vector of
.B BIGNUM
generated from
.B verifier's
data and context.

.I FFS_proof_nonce
returns a single 
.B BIGNUM
nonce, used for an iteration of proving.
.B Do not ever reuse this nonce for multiple iterations!

.I FFS_verification_nonce
returns a vector containing random 0 and 1 values
used for an iteration of verification.
.B Do not ever reuse this nonce for multiple iterations!

.I FFS_Prove
returns a
.B BIGNUM
proof from
.B verification_nonce
using the
.B prover's
data that must be sent for the verifier to validate.

.I FFS_Verify
returns a confidentiality ratio between 0 and 1, whether the 
.B proof
and 
.B proof_nonce
corresponds to the prover's secret.
